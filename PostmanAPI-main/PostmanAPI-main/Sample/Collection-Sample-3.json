{
	"info": {
		"_postman_id": "cabd1f44-73a2-4c11-8729-b04408642020",
		"name": "[QC_Anh Ngo N.L]_API_Lesson 3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13947882",
		"_collection_link": "https://sbj-os-prismatix.postman.co/workspace/SBJ_Prismatix_API~98177930-10f5-4ec3-81cb-564fb6b59ede/collection/13947882-cabd1f44-73a2-4c11-8729-b04408642020?action=share&source=collection_link&creator=13947882"
	},
	"item": [
		{
			"name": "Simple Grocery Store API",
			"item": [
				{
					"name": "Create a new cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json ()",
									"let cartId = response.cartId;",
									"pm.collectionVariables.set(\"cartId\", cartId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add item to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Đặt URL và body cho API Create New Cart",
									"const createCartUrl = \"https://simple-grocery-store-api.glitch.me/carts\";",
									"",
									"// Gọi API Create New Cart",
									"pm.sendRequest({",
									"    url: createCartUrl,",
									"    method: \"POST\",",
									"    header: {",
									"        \"Content-Type\": \"application/json\",",
									"    }",
									"}, function (err, response) {",
									"    if (err) {",
									"        console.error(\"Error creating new cart:\", err);",
									"        return;",
									"    }",
									"",
									"    // Lấy cartId từ response và lưu vào biến môi trường",
									"    const responseData = response.json();",
									"    const cartId = responseData.cartId  // Tùy thuộc vào cấu trúc response",
									"",
									"    if (cartId) {",
									"        pm.collectionVariables.set(\"cartId\", cartId);",
									"        console.log(\"New cart created with ID:\", cartId);",
									"    } else {",
									"        console.error(\"Failed to retrieve cartId from Create New Cart response\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"productId\": 8739\n   \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/{{cartId}}/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								"{{cartId}}",
								"items"
							]
						}
					},
					"response": [
						{
							"name": "Add item to cart",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"productId\": 8739\n   \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carts/{{cartId}}/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carts",
										"{{cartId}}",
										"items"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 11 Dec 2024 07:44:05 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "35"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-powered-by",
									"value": "Express"
								},
								{
									"key": "etag",
									"value": "W/\"23-kTEj+0CK4lrJKVgHMqjsiNrbltw\""
								}
							],
							"cookie": [],
							"body": "{\n    \"created\": true,\n    \"itemId\": 725249810\n}"
						}
					]
				},
				{
					"name": "Register a new API client",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Định nghĩa phần tên cố định và chiều dài tối đa",
									"const YourName = \"LanAnh_Test_\";",
									"const maxLength = 17;",
									"",
									"// Tính toán độ dài của số ngẫu nhiên (để đảm bảo tổng <= 17 ký tự)",
									"const maxRandomLength = maxLength - YourName.length;",
									"",
									"// Tạo số ngẫu nhiên với số chữ số phù hợp",
									"const randomNumber = Math.floor(Math.random() * Math.pow(10, maxRandomLength));",
									"",
									"// Ghép tên client",
									"const clientName = `${YourName}${randomNumber}`;",
									"",
									"// Gán giá trị vào collection variable",
									"pm.collectionVariables.set(\"clientName\", clientName);",
									"pm.collectionVariables.set(\"customerName\", clientName);",
									"",
									"",
									"// Log giá trị để kiểm tra",
									"console.log(\"Generated randomName:\", clientName);",
									"",
									"// Định nghĩa tên cơ bản và domain",
									"const yourname = \"LanAnh_test\";",
									"const domain = \"example.com\";",
									"",
									"// Tạo số ngẫu nhiên với 5 chữ số",
									"const random5Number = Math.floor(10000 + Math.random() * 90000); // Số ngẫu nhiên từ 10000 đến 99999",
									"",
									"// Ghép email",
									"const clientEmail = `${yourname}${random5Number}@${domain}`;",
									"",
									"// Gán vào collection variable",
									"pm.collectionVariables.set(\"clientEmail\", clientEmail);",
									"",
									"// Log email để kiểm tra",
									"console.log(\"Generated clientEmail:\", clientEmail);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"pm.collectionVariables.set(\"accessToken\", response.accessToken);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"clientName\": \"{{clientName}}\",\n   \"clientEmail\": \"{{clientEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api-clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": [
						{
							"name": "Register a new API client",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"clientName\": \"{{clientName}}\",\n   \"clientEmail\": \"{{clientEmail}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api-clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api-clients"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 11 Dec 2024 07:44:20 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "82"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-powered-by",
									"value": "Express"
								},
								{
									"key": "etag",
									"value": "W/\"52-7vpTPi3Ha8fUE33LxswQfCbkVaw\""
								}
							],
							"cookie": [],
							"body": "{\n    \"accessToken\": \"6331e9ad0d524c1b46af89e3bb3b81d5717fc4efb7ecfd63f626a77a90a5a599\"\n}"
						}
					]
				},
				{
					"name": "Create a new order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json ()",
									"let orderId = response.orderId;",
									"pm.collectionVariables.set(\"orderId\", orderId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "b80493729606daee1e8496653a2ab7b9841ee0ab668799c031fcc50a40cbbf7b",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cartId\": \"{{cartId}}\",\n    \"customerName\": \"{{customerName}}\",\n    \"comment\" : \"{{clientName}} & {{clientEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single order",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/{{orderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": [
						{
							"name": "Get a single order",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/{{orderId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										"{{orderId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 11 Dec 2024 07:44:40 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "343"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-powered-by",
									"value": "Express"
								},
								{
									"key": "etag",
									"value": "W/\"157-eleZLCWqkr6wa8iAq7EBHPgB1As\""
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"Ko99etbmQ5s9pIYawLTcy\",\n    \"items\": [\n        {\n            \"id\": 725249810,\n            \"productId\": 8739,\n            \"quantity\": 1\n        }\n    ],\n    \"customerName\": \"LanAnh_Test_49206\",\n    \"createdBy\": \"f8d606bef6b98bc84078c62608d44bd36bc8abb106dd75f23818ab0b5c8dfa7c\",\n    \"created\": \"2024-12-11T07:44:34.676Z\",\n    \"timestamp\": 1733903074676,\n    \"processed\": false,\n    \"comment\": \"LanAnh_Test_49206 & LanAnh_test15968@example.com\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Valentine_book",
			"item": [
				{
					"name": "Status",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"UP\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://valentines-book-list.glitch.me/status",
							"protocol": "https",
							"host": [
								"valentines-book-list",
								"glitch",
								"me"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a book list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"status should be OK\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"const response = pm.response.json();",
									"",
									"pm.test(\"Response contains 'results' array\", function () {",
									"    pm.expect(response).to.have.property(\"results\").that.is.an(\"array\");",
									"});",
									"",
									"pm.test(\"All books belong to category 'fiction'\", function () {",
									"    response.results.forEach((book, index) => {",
									"        pm.expect(book.category, `Book at index ${index} has category`).to.include(\"fiction\");",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://valentines-book-list.glitch.me/books/lists?api-key=8fhg93xkjd38fhg834jdfgjd&list=fiction",
							"protocol": "https",
							"host": [
								"valentines-book-list",
								"glitch",
								"me"
							],
							"path": [
								"books",
								"lists"
							],
							"query": [
								{
									"key": "api-key",
									"value": "8fhg93xkjd38fhg834jdfgjd"
								},
								{
									"key": "list",
									"value": "fiction"
								}
							]
						}
					},
					"response": [
						{
							"name": "Get a book list",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://valentines-book-list.glitch.me/books/lists?api-key=8fhg93xkjd38fhg834jdfgjd&list=fiction",
									"protocol": "https",
									"host": [
										"valentines-book-list",
										"glitch",
										"me"
									],
									"path": [
										"books",
										"lists"
									],
									"query": [
										{
											"key": "api-key",
											"value": "8fhg93xkjd38fhg834jdfgjd"
										},
										{
											"key": "list",
											"value": "fiction"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 11 Dec 2024 08:01:22 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "266"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-powered-by",
									"value": "Express"
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET, OPTIONS"
								},
								{
									"key": "etag",
									"value": "W/\"10a-AgA1yFz9iaf0KX0vnSpaJjB+NrQ\""
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"OK\",\n    \"num_results\": 1,\n    \"page\": 1,\n    \"total_pages\": 1,\n    \"results\": [\n        {\n            \"title\": \"The Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win\",\n            \"category\": [\n                \"fiction\",\n                \"favourite-books\"\n            ],\n            \"type\": \"audio\",\n            \"author\": \"Gene Kim\",\n            \"release_year\": 2018,\n            \"rating\": \"9\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get a book list_400 Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://valentines-book-list.glitch.me/books/lists?api-key=8fhg93xkjd38fhg834jdfgjd&list=fiction",
							"protocol": "https",
							"host": [
								"valentines-book-list",
								"glitch",
								"me"
							],
							"path": [
								"books",
								"lists"
							],
							"query": [
								{
									"key": "api-key",
									"value": "8fhg93xkjd38fhg834jdfgjd"
								},
								{
									"key": "list",
									"value": "fiction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a book list_400 Bad Request 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Parse the response body",
									"const response = pm.response.json();",
									"",
									"// Kiểm tra sự tồn tại của 'error'",
									"pm.test(\"Response contains 'error'\", function () {",
									"    pm.expect(response).to.have.property(\"error\");",
									"});",
									"",
									"// Kiểm tra 'error-string'",
									"pm.test(\"Response contains 'error-string'\", function () {",
									"    pm.expect(response.error).to.have.property(\"error-string\").that.is.a(\"string\").and.is.not.empty;",
									"});",
									"",
									"// Kiểm tra nội dung 'error-string'",
									"pm.test(\"Error string matches expected value\", function () {",
									"    pm.expect(response.error[\"error-string\"]).to.eql(\"Invalid list.\");",
									"});",
									"",
									"// Kiểm tra 'errorcode'",
									"pm.test(\"Response contains 'errorcode'\", function () {",
									"    pm.expect(response.error.detail).to.have.property(\"errorcode\").that.is.a(\"string\");",
									"});",
									"",
									"// Kiểm tra giá trị cụ thể của 'errorcode'",
									"pm.test(\"Error code matches expected value\", function () {",
									"    pm.expect(response.error.detail.errorcode).to.eql(\"INVALID_BOOK_LIST\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://valentines-book-list.glitch.me/books/lists?api-key=8fhg93xkjd38fhg834jdfgjd&list=fictions",
							"protocol": "https",
							"host": [
								"valentines-book-list",
								"glitch",
								"me"
							],
							"path": [
								"books",
								"lists"
							],
							"query": [
								{
									"key": "api-key",
									"value": "8fhg93xkjd38fhg834jdfgjd"
								},
								{
									"key": "list",
									"value": "fictions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a book list_401 Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://valentines-book-list.glitch.me/books/lists?api-key=8fhg93xkjd38fhg834jdfgjd&list=fiction",
							"protocol": "https",
							"host": [
								"valentines-book-list",
								"glitch",
								"me"
							],
							"path": [
								"books",
								"lists"
							],
							"query": [
								{
									"key": "api-key",
									"value": "8fhg93xkjd38fhg834jdfgjd"
								},
								{
									"key": "list",
									"value": "fiction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a book list_401 Unauthorized 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"// Parse the response body",
									"const response = pm.response.json();",
									"",
									"// Kiểm tra sự tồn tại của 'error'",
									"pm.test(\"Response contains 'error'\", function () {",
									"    pm.expect(response).to.have.property(\"error\");",
									"});",
									"",
									"// Kiểm tra 'error-string'",
									"pm.test(\"Response contains 'error-string'\", function () {",
									"    pm.expect(response.error).to.have.property(\"error-string\").that.is.a(\"string\").and.is.not.empty;",
									"});",
									"",
									"// Kiểm tra nội dung của 'error-string'",
									"pm.test(\"Error string matches expected value\", function () {",
									"    pm.expect(response.error[\"error-string\"]).to.eql(\"Invalid API Key.\");",
									"});",
									"",
									"// Kiểm tra sự tồn tại của 'errorcode'",
									"pm.test(\"Response contains 'errorcode'\", function () {",
									"    pm.expect(response.error.detail).to.have.property(\"errorcode\").that.is.a(\"string\");",
									"});",
									"",
									"// Kiểm tra giá trị cụ thể của 'errorcode'",
									"pm.test(\"Error code matches expected value\", function () {",
									"    pm.expect(response.error.detail.errorcode).to.eql(\"INVALID_API_KEY\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://valentines-book-list.glitch.me/books/lists?api-key=8fhg93xkjd38fhg834jdfgj&list=fiction",
							"protocol": "https",
							"host": [
								"valentines-book-list",
								"glitch",
								"me"
							],
							"path": [
								"books",
								"lists"
							],
							"query": [
								{
									"key": "api-key",
									"value": "8fhg93xkjd38fhg834jdfgj"
								},
								{
									"key": "list",
									"value": "fiction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a book list_Schema Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Import thư viện AJV",
									"const Ajv = require('ajv');",
									"const ajv = new Ajv();",
									"",
									"// Định nghĩa schema",
									"const schema = {",
									"    type: \"object\",",
									"    properties: {",
									"        status: { type: \"string\" },",
									"        num_results: { type: \"integer\" },",
									"        page: { type: \"integer\" },",
									"        total_pages: { type: \"integer\" },",
									"        results: {",
									"            type: \"array\",",
									"            items: {",
									"                type: \"object\",",
									"                properties: {",
									"                    title: { type: \"string\" },",
									"                    category: {",
									"                        type: \"array\",",
									"                        items: { type: \"string\" }",
									"                    },",
									"                    type: { type: \"string\" },",
									"                    author: { type: \"string\" },",
									"                    release_year: { type: \"integer\" },",
									"                    rating: {type: [\"integer\", \"string\" ]}",
									"                },",
									"                required: [\"title\", \"category\", \"type\", \"author\", \"release_year\", \"rating\"]",
									"            }",
									"        }",
									"    },",
									"    required: [\"status\", \"num_results\", \"page\", \"total_pages\", \"results\"]",
									"};",
									"",
									"// Parse response body",
									"const response = pm.response.json();",
									"",
									"// Validate response schema",
									"const validate = ajv.compile(schema);",
									"const valid = validate(response);",
									"",
									"pm.test(\"Response schema is valid\", function () {",
									"    pm.expect(valid).to.be.true;",
									"",
									"    // Log lỗi nếu schema không hợp lệ",
									"    if (!valid) {",
									"        console.log(\"Schema validation errors:\", validate.errors);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://valentines-book-list.glitch.me/books/lists?api-key=8fhg93xkjd38fhg834jdfgjd&list=non-fiction",
							"protocol": "https",
							"host": [
								"valentines-book-list",
								"glitch",
								"me"
							],
							"path": [
								"books",
								"lists"
							],
							"query": [
								{
									"key": "api-key",
									"value": "8fhg93xkjd38fhg834jdfgjd"
								},
								{
									"key": "list",
									"value": "non-fiction"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Exercise_3",
			"item": [
				{
					"name": "Register a new API client",
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "Create a new order",
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "Get all orders",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Create a new order _ ALL in",
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://simple-grocery-store-api.glitch.me"
		},
		{
			"key": "accessToken",
			"value": "b80493729606daee1e8496653a2ab7b9841ee0ab668799c031fcc50a40cbbf7b",
			"type": "string"
		},
		{
			"key": "cartId",
			"value": "",
			"type": "string"
		},
		{
			"key": "itemId",
			"value": "4641"
		},
		{
			"key": "customerName",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "randomName",
			"value": "",
			"type": "string"
		},
		{
			"key": "any_email_format",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "clientName",
			"value": ""
		},
		{
			"key": "clientEmail",
			"value": ""
		}
	]
}
